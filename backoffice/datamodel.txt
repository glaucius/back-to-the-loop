Class Backend_Users
    id, incremental, PK
    nome, varchar
    email, varchar
    password, varchar
    profile_id, FK from Profile table/class
    data_criacao, timestamp
    data_ultima_atualizacao, timestamp    

Class Profile
    id, incremental, PK
    nome, varchar
    data_criacao, timestamp
    data_ultima_atualizacao, timestamp    

Class Organizacao
    id, incremental, PK
    nome, varchar
    organizador_id, FK from Backend_Users table/class
    data_criacao, timestamp
    data_ultima_atualizacao, timestamp

Class Backyard
    id, incremental, PK
    nome, varchar
    organizador_id, FK from Organizacao table/class
    descricao, text
    endereco, varchar
    cidade, varchar
    estado, varchar
    pais, varchar
    data_evento, date
    capacidade, integer (máximo de atletas que podem participar)
    numero_inicial, integer (primeiro número de peito a ser atribuído)
    status, enum (PREPARACAO, ATIVO, PAUSADO, FINALIZADO)
    profile_picture_path, varchar
    data_criacao, timestamp
    data_ultima_atualizacao, timestamp

Class Atleta
    id, incremental, PK
    nome, varchar
    data_nascimento, date
    sexo, varchar
    cpf, varchar
    email, varchar
    password, varchar
    endereco, varchar
    cidade, varchar
    estado, varchar
    pais, varchar
    profile_picture_path, varchar
    data_criacao, timestamp
    data_ultima_atualizacao, timestamp

Class AtletaBackyard (Tabela de Inscrição - Relacionamento Many-to-Many)
    id, incremental, PK
    atleta_id, FK from Atleta table/class
    backyard_id, FK from Backyard table/class
    numero_peito, integer (número do peito do atleta na prova)
    status_inscricao, varchar (inscrito, pendente, cancelado)
    data_inscricao, timestamp
    data_criacao, timestamp
    data_ultima_atualizacao, timestamp

Class Loop
    id, incremental, PK
    backyard_id, FK from Backyard table/class
    numero_loop, integer
    status, enum (PREPARACAO, ATIVO, FINALIZADO)
    data_inicio, timestamp
    data_fim, timestamp
    criado_em, timestamp
    atualizado_em, timestamp

Class AtletaLoop (Participação do Atleta no Loop)
    id, incremental, PK
    atleta_id, FK from Atleta table/class
    loop_id, FK from Loop table/class
    status, enum (ATIVO, CONCLUIDO, ELIMINADO, DNF, DNS)
    tempo_inicio, timestamp (quando o atleta iniciou o loop)
    tempo_fim, timestamp (quando o atleta terminou o loop)
    tempo_total_segundos, integer (tempo em segundos para completar o loop)
    observacoes, text (observações sobre a participação do atleta)
    criado_em, timestamp
    atualizado_em, timestamp

ENUMS:
    BackyardStatus: PREPARACAO, ATIVO, PAUSADO, FINALIZADO
    LoopStatus: PREPARACAO, ATIVO, FINALIZADO
    AtletaLoopStatus: ATIVO, CONCLUIDO, ELIMINADO, DNF, DNS
    StatusInscricao: inscrito, pendente, cancelado

RELACIONAMENTOS:
    - Backend_Users 1:N Profile (um perfil pode ter vários usuários)
    - Backend_Users 1:N Organizacao (um usuário pode ter várias organizações)
    - Organizacao 1:N Backyard (uma organização pode ter várias backyards)
    - Backyard 1:N Loop (uma backyard pode ter vários loops)
    - Backyard N:M Atleta (através de AtletaBackyard - inscrições)
    - Loop N:M Atleta (através de AtletaLoop - participação nos loops)

FUNCIONALIDADES PRINCIPAIS:
    1. Sistema de Números de Peito:
       - Cada backyard define capacidade máxima e número inicial
       - Números são atribuídos automaticamente nas inscrições
       - Botão "Gerar Números" para atribuir números sob demanda
    
    2. Gestão de Loops:
       - Controle de status de cada loop (preparação, ativo, finalizado)
       - Registro de tempos de cada atleta por loop
       - Regras do Backyard Ultra: evento só termina com loop solo completado
    
    3. Status de Atletas nos Loops:
       - ATIVO: atleta está correndo o loop atual
       - CONCLUIDO: atleta terminou o loop no tempo
       - ELIMINADO: atleta não completou o loop no tempo
       - DNF (Did Not Finish): atleta não terminou o loop por outros motivos
       - DNS (Did Not Start): atleta não iniciou o loop
    
    4. Autenticação e Autorização:
       - Perfis: Admin (acesso total) e Organizador (suas backyards)
       - Login seguro com hash de senhas
       - Controle de acesso por decoradores
    
    5. Interface de Atletas (Frontend):
       - Cadastro e login de atletas
       - Inscrição em backyards disponíveis
       - Visualização das próprias inscrições
       - Edição de perfil com upload de imagem
    
    6. Visualização em Tempo Real:
       - Página live para acompanhar backyards ativas
       - Lista de atletas ativos e que chegaram (concluídos)
       - Histórico de loops anteriores
       - Estatísticas em tempo real
       - Detalhes específicos de cada loop

REGRAS DE NEGÓCIO:
    1. Backyard Ultra:
       - Cada loop tem duração fixa (normalmente 1 hora)
       - Atletas que não completam no tempo são eliminados
       - Evento só termina quando um atleta completa um loop sozinho
       - O último atleta restante é o vencedor
    
    2. Números de Peito:
       - Únicos por backyard
       - Sequenciais a partir do número inicial definido
       - Máximo definido pela capacidade da backyard
    
    3. Loops:
       - Criados sequencialmente (1, 2, 3...)
       - Apenas atletas que completaram o loop anterior participam do próximo
       - Status automático baseado na conclusão dos participantes
    
    4. Visualização Live:
       - Atletas que chegaram (CONCLUIDO) aparecem no topo da lista
       - Atletas correndo (ATIVO) aparecem na parte inferior
       - Atletas eliminados ficam em seção separada
       - Atualização das estatísticas em tempo real
    
    5. Sistema de Imagens:
       - Upload de imagens para atletas e backyards
       - Armazenamento em MinIO (S3-compatible)
       - Fallback para iniciais quando não há imagem